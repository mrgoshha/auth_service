// Code generated by MockGen. DO NOT EDIT.
// Source: auth_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthSession is a mock of AuthSession interface.
type MockAuthSession struct {
	ctrl     *gomock.Controller
	recorder *MockAuthSessionMockRecorder
}

// MockAuthSessionMockRecorder is the mock recorder for MockAuthSession.
type MockAuthSessionMockRecorder struct {
	mock *MockAuthSession
}

// NewMockAuthSession creates a new mock instance.
func NewMockAuthSession(ctrl *gomock.Controller) *MockAuthSession {
	mock := &MockAuthSession{ctrl: ctrl}
	mock.recorder = &MockAuthSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthSession) EXPECT() *MockAuthSessionMockRecorder {
	return m.recorder
}

// GenerateTokens mocks base method.
func (m *MockAuthSession) GenerateTokens(id, ip string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTokens", id, ip)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateTokens indicates an expected call of GenerateTokens.
func (mr *MockAuthSessionMockRecorder) GenerateTokens(id, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokens", reflect.TypeOf((*MockAuthSession)(nil).GenerateTokens), id, ip)
}

// Refresh mocks base method.
func (m *MockAuthSession) Refresh(accessToken, refreshToken, ip string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", accessToken, refreshToken, ip)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Refresh indicates an expected call of Refresh.
func (mr *MockAuthSessionMockRecorder) Refresh(accessToken, refreshToken, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockAuthSession)(nil).Refresh), accessToken, refreshToken, ip)
}
